/*
 * StatsAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.dcsa.api.stats.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * DomainEnum to be used.
 */
public enum DomainEnum {
    TNT,

    TNT_NTF,

    OVS,

    EBL,

    EBL_NTF,

    EBL_SUR,

    EBL_SUR_RSP,

    EBL_ISS,

    EBL_ISS_SUR,

    BKG,

    BKG_NTF,

    CBF,

    JIT,

    CS,

    AN,

    AN_NTF,

    DI,

    DI_NTF,

    RMC,

    RMC_NTF,

    RMO,

    RMO_NTF,

    IC,

    IC_NTF,

    IO,

    IO_NTF,

    DO,

    DO_NTF,

    TO,

    TO_NTF,

    CRO,

    CRO_NTF;


    private static TreeMap<String, DomainEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        TNT.value = "TNT";
        TNT_NTF.value = "TNT_NTF";
        OVS.value = "OVS";
        EBL.value = "EBL";
        EBL_NTF.value = "EBL_NTF";
        EBL_SUR.value = "EBL_SUR";
        EBL_SUR_RSP.value = "EBL_SUR_RSP";
        EBL_ISS.value = "EBL_ISS";
        EBL_ISS_SUR.value = "EBL_ISS_SUR";
        BKG.value = "BKG";
        BKG_NTF.value = "BKG_NTF";
        CBF.value = "CBF";
        JIT.value = "JIT";
        CS.value = "CS";
        AN.value = "AN";
        AN_NTF.value = "AN_NTF";
        DI.value = "DI";
        DI_NTF.value = "DI_NTF";
        RMC.value = "RMC";
        RMC_NTF.value = "RMC_NTF";
        RMO.value = "RMO";
        RMO_NTF.value = "RMO_NTF";
        IC.value = "IC";
        IC_NTF.value = "IC_NTF";
        IO.value = "IO";
        IO_NTF.value = "IO_NTF";
        DO.value = "DO";
        DO_NTF.value = "DO_NTF";
        TO.value = "TO";
        TO_NTF.value = "TO_NTF";
        CRO.value = "CRO";
        CRO_NTF.value = "CRO_NTF";

        valueMap.put("TNT", TNT);
        valueMap.put("TNT_NTF", TNT_NTF);
        valueMap.put("OVS", OVS);
        valueMap.put("EBL", EBL);
        valueMap.put("EBL_NTF", EBL_NTF);
        valueMap.put("EBL_SUR", EBL_SUR);
        valueMap.put("EBL_SUR_RSP", EBL_SUR_RSP);
        valueMap.put("EBL_ISS", EBL_ISS);
        valueMap.put("EBL_ISS_SUR", EBL_ISS_SUR);
        valueMap.put("BKG", BKG);
        valueMap.put("BKG_NTF", BKG_NTF);
        valueMap.put("CBF", CBF);
        valueMap.put("JIT", JIT);
        valueMap.put("CS", CS);
        valueMap.put("AN", AN);
        valueMap.put("AN_NTF", AN_NTF);
        valueMap.put("DI", DI);
        valueMap.put("DI_NTF", DI_NTF);
        valueMap.put("RMC", RMC);
        valueMap.put("RMC_NTF", RMC_NTF);
        valueMap.put("RMO", RMO);
        valueMap.put("RMO_NTF", RMO_NTF);
        valueMap.put("IC", IC);
        valueMap.put("IC_NTF", IC_NTF);
        valueMap.put("IO", IO);
        valueMap.put("IO_NTF", IO_NTF);
        valueMap.put("DO", DO);
        valueMap.put("DO_NTF", DO_NTF);
        valueMap.put("TO", TO);
        valueMap.put("TO_NTF", TO_NTF);
        valueMap.put("CRO", CRO);
        valueMap.put("CRO_NTF", CRO_NTF);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static DomainEnum constructFromString(String toConvert) throws IOException {
        DomainEnum enumValue = fromString(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static DomainEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of DomainEnum values to list of string values.
     * @param toConvert The list of DomainEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<DomainEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (DomainEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 