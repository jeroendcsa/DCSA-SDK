/*
 * StatsAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.dcsa.api.stats.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import org.dcsa.api.stats.ApiHelper;
import org.dcsa.api.stats.Server;
import org.dcsa.api.stats.exceptions.ApiException;
import org.dcsa.api.stats.exceptions.ErrorResponseException;
import org.dcsa.api.stats.http.request.HttpMethod;
import org.dcsa.api.stats.models.V1StatsRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class RealTimeController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public RealTimeController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint allows you to report the usage statistics of a reference API call.
     * @param  dCSAAPIKEY  Required parameter: An API key for authorizing requests.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void postV1Stats(
            final UUID dCSAAPIKEY,
            final V1StatsRequest body) throws ApiException, IOException {
        preparePostV1StatsRequest(dCSAAPIKEY, body).execute();
    }

    /**
     * This endpoint allows you to report the usage statistics of a reference API call.
     * @param  dCSAAPIKEY  Required parameter: An API key for authorizing requests.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> postV1StatsAsync(
            final UUID dCSAAPIKEY,
            final V1StatsRequest body) {
        try { 
            return preparePostV1StatsRequest(dCSAAPIKEY, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for postV1Stats.
     */
    private ApiCall<Void, ApiException> preparePostV1StatsRequest(
            final UUID dCSAAPIKEY,
            final V1StatsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v1/stats")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("DCSA-API-KEY")
                                .value(String.valueOf(dCSAAPIKEY)).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}